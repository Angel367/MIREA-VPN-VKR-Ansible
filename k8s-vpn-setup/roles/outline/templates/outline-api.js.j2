const express = require('express');
const bodyParser = require('body-parser');
const { exec } = require('child_process');
const axios = require('axios');
const fs = require('fs');

const app = express();
app.use(bodyParser.json());

const API_PORT = 8081;
const CONFIG_PATH = '/opt/outline/persisted-state/shadowbox-config.json';

// Получение API ключа из конфигурации
const getApiKey = () => {
  try {
    const config = JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf8'));
    return config.apiUrl.split('/').pop();
  } catch (err) {
    console.error('Error reading config:', err);
    return null;
  }
};

// Получение статуса сервера
app.get('/status', (req, res) => {
  exec('docker ps | grep shadowbox', (err, stdout) => {
    if (err || !stdout) {
      return res.json({ status: 'down' });
    }
    return res.json({ status: 'running' });
  });
});

// Создание ключа доступа
app.post('/access-keys', async (req, res) => {
  try {
    const { name, limit_bytes } = req.body;
    const apiKey = getApiKey();

    if (!apiKey) {
      return res.status(500).json({ error: 'API key not found' });
    }

    // Создание ключа через Outline API
    const response = await axios.post(`https://127.0.0.1:{{ outline_api_port }}/access-keys`, {}, {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
      },
      httpsAgent: new (require('https').Agent)({
        rejectUnauthorized: false
      })
    });

    const keyId = response.data.id;

    // Добавление имени
    if (name) {
      await axios.put(`https://127.0.0.1:{{ outline_api_port }}/access-keys/${keyId}/name`,
        { name },
        {
          headers: {
            'Authorization': `Bearer ${apiKey}`,
          },
          httpsAgent: new (require('https').Agent)({
            rejectUnauthorized: false
          })
        }
      );
    }

    // Добавление лимита трафика
    if (limit_bytes) {
      await axios.put(`https://127.0.0.1:{{ outline_api_port }}/access-keys/${keyId}/data-limit`,
        { limit: { bytes: limit_bytes } },
        {
          headers: {
            'Authorization': `Bearer ${apiKey}`,
          },
          httpsAgent: new (require('https').Agent)({
            rejectUnauthorized: false
          })
        }
      );
    }

    return res.json(response.data);
  } catch (error) {
    console.error('Error creating access key:', error.message);
    return res.status(500).json({ error: error.message });
  }
});

// Удаление ключа доступа
app.delete('/access-keys/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const apiKey = getApiKey();

    if (!apiKey) {
      return res.status(500).json({ error: 'API key not found' });
    }

    await axios.delete(`https://127.0.0.1:{{ outline_api_port }}/access-keys/${id}`, {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
      },
      httpsAgent: new (require('https').Agent)({
        rejectUnauthorized: false
      })
    });

    return res.json({ success: true });
  } catch (error) {
    console.error('Error deleting access key:', error.message);
    return res.status(500).json({ error: error.message });
  }
});

// Получение всех ключей
app.get('/access-keys', async (req, res) => {
  try {
    const apiKey = getApiKey();

    if (!apiKey) {
      return res.status(500).json({ error: 'API key not found' });
    }

    const response = await axios.get(`https://127.0.0.1:{{ outline_api_port }}/access-keys`, {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
      },
      httpsAgent: new (require('https').Agent)({
        rejectUnauthorized: false
      })
    });

    return res.json(response.data);
  } catch (error) {
    console.error('Error getting access keys:', error.message);
    return res.status(500).json({ error: error.message });
  }
});

// Получение метрик сервера
app.get('/metrics', async (req, res) => {
  try {
    const apiKey = getApiKey();

    if (!apiKey) {
      return res.status(500).json({ error: 'API key not found' });
    }

    const response = await axios.get(`https://127.0.0.1:{{ outline_api_port }}/metrics`, {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
      },
      httpsAgent: new (require('https').Agent)({
        rejectUnauthorized: false
      })
    });

    return res.json(response.data);
  } catch (error) {
    console.error('Error getting metrics:', error.message);
    return res.status(500).json({ error: error.message });
  }
});

// Запуск сервера
app.listen(API_PORT, '0.0.0.0', () => {
  console.log(`Outline API server running on port ${API_PORT}`);
});