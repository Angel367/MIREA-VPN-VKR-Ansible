apiVersion: apps/v1
kind: Deployment
metadata:
  name: vpn-backend
  namespace: vpn
spec:
  replicas: 2
  selector:
    matchLabels:
      app: vpn-backend
  template:
    metadata:
      labels:
        app: vpn-backend
    spec:
      containers:
      - name: vpn-backend
        image: {{ docker_registry }}{{ django_backend_image }}
        ports:
        - containerPort: 8000
        env:
        - name: DB_NAME
          value: "vpn_db"
        - name: DB_USER
          value: "postgres"
        - name: DB_PASSWORD
          value: "postgres"  # В продакшне использовать секреты Kubernetes
        - name: DB_HOST
          value: "postgres"
        - name: ALLOWED_HOSTS
          value: "*"
        volumeMounts:
        - name: outline-servers-config
          mountPath: /app/outline_servers
      volumes:
      - name: outline-servers-config
        configMap:
          name: outline-servers
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: vpn
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:14
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "vpn_db"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"  # В продакшне использовать секреты Kubernetes
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: vpn
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 10Gi