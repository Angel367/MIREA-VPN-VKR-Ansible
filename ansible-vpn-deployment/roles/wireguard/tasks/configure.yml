---
- name: Generate WireGuard private key
  shell: wg genkey
  register: private_key_result
  args:
    creates: /etc/wireguard/private.key

- name: Save private key to file
  copy:
    content: "{{ private_key_result.stdout }}"
    dest: /etc/wireguard/private.key
    mode: '0600'
  when: private_key_result.changed

- name: Generate WireGuard public key
  shell: echo "{{ private_key_result.stdout }}" | wg pubkey
  register: public_key_result
  when: private_key_result.changed

- name: Save public key to file
  copy:
    content: "{{ public_key_result.stdout }}"
    dest: /etc/wireguard/public.key
    mode: '0644'
  when: public_key_result.changed

- name: Set fact for public and private keys
  set_fact:
    wg_private_key: "{{ private_key_result.stdout }}"
    wg_public_key: "{{ public_key_result.stdout }}"
  when: private_key_result.changed

- name: Get existing private key if available
  slurp:
    src: /etc/wireguard/private.key
  register: existing_private_key
  ignore_errors: yes
  when: not private_key_result.changed

- name: Get existing public key if available
  slurp:
    src: /etc/wireguard/public.key
  register: existing_public_key
  ignore_errors: yes
  when: not private_key_result.changed

- name: Set fact for existing keys
  set_fact:
    wg_private_key: "{{ existing_private_key.content | b64decode | trim }}"
    wg_public_key: "{{ existing_public_key.content | b64decode | trim }}"
  when: not private_key_result.changed and existing_private_key.content is defined and existing_public_key.content is defined

- name: Configure WireGuard interface
  template:
    src: wg0.conf.j2
    dest: /etc/wireguard/{{ wireguard_interface }}.conf
    mode: '0600'
  notify: restart wireguard

- name: Configure system for IP forwarding
  template:
    src: sysctl.conf.j2
    dest: /etc/sysctl.d/99-wireguard.conf
  notify: apply sysctl

- name: Apply sysctl settings
  command: sysctl -p /etc/sysctl.d/99-wireguard.conf
  changed_when: false

- name: Enable and start WireGuard
  systemd:
    name: "wg-quick@{{ wireguard_interface }}"
    enabled: yes
    state: started

- name: Configure UFW to allow WireGuard traffic (Debian/Ubuntu)
  ufw:
    rule: allow
    port: "{{ wireguard_port }}"
    proto: udp
  when: ansible_os_family == "Debian"

- name: Configure firewalld to allow WireGuard traffic (CentOS/RHEL)
  firewalld:
    port: "{{ wireguard_port }}/udp"
    permanent: yes
    state: enabled
  when: ansible_os_family == "RedHat"
  notify: restart firewalld